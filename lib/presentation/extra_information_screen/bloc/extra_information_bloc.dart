import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/layoutchipview_item_model.dart';import '../models/propertyfeatureslist_item_model.dart';import '../models/totalroomschipview_item_model.dart';import '../models/environmentfacilitieschipview_item_model.dart';import 'package:kanza_s_application1/presentation/extra_information_screen/models/extra_information_model.dart';part 'extra_information_event.dart';part 'extra_information_state.dart';/// A bloc that manages the state of a ExtraInformation according to the event that is dispatched to it.
class ExtraInformationBloc extends Bloc<ExtraInformationEvent, ExtraInformationState> {ExtraInformationBloc(ExtraInformationState initialState) : super(initialState) { on<ExtraInformationInitialEvent>(_onInitialize); on<UpdateChipViewEvent>(_updateChipView); on<UpdateChipView1Event>(_updateChipView1); on<UpdateChipView2Event>(_updateChipView2); }

_updateChipView(UpdateChipViewEvent event, Emitter<ExtraInformationState> emit, ) { List<LayoutchipviewItemModel> newList = List<LayoutchipviewItemModel>.from(state.extraInformationModelObj!.layoutchipviewItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(extraInformationModelObj: state.extraInformationModelObj?.copyWith(layoutchipviewItemList: newList))); } 
_updateChipView1(UpdateChipView1Event event, Emitter<ExtraInformationState> emit, ) { List<TotalroomschipviewItemModel> newList = List<TotalroomschipviewItemModel>.from(state.extraInformationModelObj!.totalroomschipviewItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(extraInformationModelObj: state.extraInformationModelObj?.copyWith(totalroomschipviewItemList: newList))); } 
_updateChipView2(UpdateChipView2Event event, Emitter<ExtraInformationState> emit, ) { List<EnvironmentfacilitieschipviewItemModel> newList = List<EnvironmentfacilitieschipviewItemModel>.from(state.extraInformationModelObj!.environmentfacilitieschipviewItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(extraInformationModelObj: state.extraInformationModelObj?.copyWith(environmentfacilitieschipviewItemList: newList))); } 
List<LayoutchipviewItemModel> fillLayoutchipviewItemList() { return List.generate(2, (index) => LayoutchipviewItemModel()); } 
List<PropertyfeatureslistItemModel> fillPropertyfeatureslistItemList() { return [PropertyfeatureslistItemModel(bedroom: "Bedroom", text: "3"), PropertyfeatureslistItemModel(bedroom: "Bathroom", text: "2"), PropertyfeatureslistItemModel(bedroom: "Balcony", text: "2")]; } 
List<TotalroomschipviewItemModel> fillTotalroomschipviewItemList() { return List.generate(4, (index) => TotalroomschipviewItemModel()); } 
List<EnvironmentfacilitieschipviewItemModel> fillEnvironmentfacilitieschipviewItemList() { return List.generate(7, (index) => EnvironmentfacilitieschipviewItemModel()); } 
_onInitialize(ExtraInformationInitialEvent event, Emitter<ExtraInformationState> emit, ) async  { emit(state.copyWith(priceController: TextEditingController(), priceController1: TextEditingController())); emit(state.copyWith(extraInformationModelObj: state.extraInformationModelObj?.copyWith(layoutchipviewItemList: fillLayoutchipviewItemList(), propertyfeatureslistItemList: fillPropertyfeatureslistItemList(), totalroomschipviewItemList: fillTotalroomschipviewItemList(), environmentfacilitieschipviewItemList: fillEnvironmentfacilitieschipviewItemList()))); } 
 }
