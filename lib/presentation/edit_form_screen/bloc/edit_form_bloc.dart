import 'package:equatable/equatable.dart';import 'package:flutter/material.dart';import '/core/app_export.dart';import '../models/layout2_item_model.dart';import '../models/layout4_item_model.dart';import '../models/shape_item_model.dart';import '../models/layout6_item_model.dart';import '../models/layout8_item_model.dart';import '../models/layout9_item_model.dart';import '../models/seventy_item_model.dart';import 'package:kanza_s_application1/presentation/edit_form_screen/models/edit_form_model.dart';part 'edit_form_event.dart';part 'edit_form_state.dart';/// A bloc that manages the state of a EditForm according to the event that is dispatched to it.
class EditFormBloc extends Bloc<EditFormEvent, EditFormState> {EditFormBloc(EditFormState initialState) : super(initialState) { on<EditFormInitialEvent>(_onInitialize); on<UpdateChipViewEvent>(_updateChipView); on<UpdateChipView1Event>(_updateChipView1); on<UpdateChipView2Event>(_updateChipView2); on<UpdateChipView3Event>(_updateChipView3); on<UpdateChipView4Event>(_updateChipView4); }

_updateChipView(UpdateChipViewEvent event, Emitter<EditFormState> emit, ) { List<Layout2ItemModel> newList = List<Layout2ItemModel>.from(state.editFormModelObj!.layout2ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout2ItemList: newList))); } 
_updateChipView1(UpdateChipView1Event event, Emitter<EditFormState> emit, ) { List<Layout4ItemModel> newList = List<Layout4ItemModel>.from(state.editFormModelObj!.layout4ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout4ItemList: newList))); } 
_updateChipView2(UpdateChipView2Event event, Emitter<EditFormState> emit, ) { List<Layout6ItemModel> newList = List<Layout6ItemModel>.from(state.editFormModelObj!.layout6ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout6ItemList: newList))); } 
_updateChipView3(UpdateChipView3Event event, Emitter<EditFormState> emit, ) { List<Layout9ItemModel> newList = List<Layout9ItemModel>.from(state.editFormModelObj!.layout9ItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout9ItemList: newList))); } 
_updateChipView4(UpdateChipView4Event event, Emitter<EditFormState> emit, ) { List<SeventyItemModel> newList = List<SeventyItemModel>.from(state.editFormModelObj!.seventyItemList); newList[event.index] = newList[event.index].copyWith(isSelected: event.isSelected); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(seventyItemList: newList))); } 
List<Layout2ItemModel> fillLayout2ItemList() { return List.generate(2, (index) => Layout2ItemModel()); } 
List<Layout4ItemModel> fillLayout4ItemList() { return List.generate(5, (index) => Layout4ItemModel()); } 
List<ShapeItemModel> fillShapeItemList() { return [ShapeItemModel(shape: ImageConstant.imgShape52), ShapeItemModel(shape: ImageConstant.imgShape53), ShapeItemModel(shape: ImageConstant.imgShape21), ShapeItemModel(shape: ImageConstant.imgShape21)]; } 
List<Layout6ItemModel> fillLayout6ItemList() { return List.generate(2, (index) => Layout6ItemModel()); } 
List<Layout8ItemModel> fillLayout8ItemList() { return [Layout8ItemModel(bedroom: "Bedroom", text: "2"), Layout8ItemModel(bedroom: "Bathroom", text: "2"), Layout8ItemModel(bedroom: "Balcony", text: "1")]; } 
List<Layout9ItemModel> fillLayout9ItemList() { return List.generate(4, (index) => Layout9ItemModel()); } 
List<SeventyItemModel> fillSeventyItemList() { return List.generate(7, (index) => SeventyItemModel()); } 
_onInitialize(EditFormInitialEvent event, Emitter<EditFormState> emit, ) async  { emit(state.copyWith(formPasswordController: TextEditingController())); emit(state.copyWith(editFormModelObj: state.editFormModelObj?.copyWith(layout2ItemList: fillLayout2ItemList(), layout4ItemList: fillLayout4ItemList(), shapeItemList: fillShapeItemList(), layout6ItemList: fillLayout6ItemList(), layout8ItemList: fillLayout8ItemList(), layout9ItemList: fillLayout9ItemList(), seventyItemList: fillSeventyItemList()))); } 
 }
